linters-settings:
  varnamelen:
    max-distance: 30
    check-receiver: false
    check-return: false
    check-type-param: false
    ignore-type-assert-ok: true
    ignore-map-index-ok: true
    ignore-chan-recv-ok: true
    ignore-names:
    - err
    - id
    - tx
    - db
    - tt
    ignore-decls:
    - t testing.T
    - e error
    - i int
    - T any
    - w http.ResponseWriter
    - r *http.Request

  sloglint:
    no-mixed-args: true
    attr-only: true
    no-global: "all"
    static-msg: false
    key-naming-case: snake
    forbidden-keys:
      - time
      - level
      - msg
    args-on-sep-lines: false

linters:
  disable:
  - staticcheck # Disabled, because the author of staticcheck doesn't support or approve the use of staticcheck as a library inside golangci-lint
  enable:
  - asasalint # Check for pass []any as any in variadic func(...any)
  - asciicheck # Checks that all code identifiers does not have non-ASCII symbols in the name
  - bodyclose # Checks whether HTTP response body is closed successfully
  - containedctx # Containedctx is a linter that detects struct contained context.Context field
  - contextcheck # Check whether the function uses a non-inherited context
  - copyloopvar # Copyloopvar is a linter detects places where loop variables are copied
  - durationcheck # Check for two durations multiplied together
  - errcheck # Errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases
  - errname # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error
  - exhaustive # Check exhaustiveness of enum switch statements
  - gocheckcompilerdirectives # Checks that go compiler directive comments (//go:) are valid
  - gocognit # Computes and checks the cognitive complexity of functions
  - goconst # Finds repeated strings that could be replaced by a constant
  - gocritic # Provides diagnostics that check for bugs, performance and style issues
  - gocyclo # Computes and checks the cyclomatic complexity of function
  - gosimple # Linter for Go source code that specializes in simplifying code
  - govet # Vet examines Go source code and reports suspicious constructs. It is roughly the same as 'go vet' and uses its passes
  - ineffassign # Detects when assignments to existing variables are not used
  - misspell # Finds commonly misspelled English words
  - nestif # Reports deeply nested if statements
  - noctx # Finds sending http request without context.Context
  - prealloc # Finds slice declarations that could potentially be pre-allocated
  - predeclared # Find code that shadows one of Go's predeclared identifiers
  - reassign # Checks that package variables are not reassigned
  - sloglint # Ensure consistent code style when using log/slog
  - typecheck
  - unconvert # Remove unnecessary type conversions
  - unparam # Reports unused function parameters
  - unused # Checks Go code for unused constants, variables, functions and types
  - varnamelen # Checks that the length of a variable's name matches its scope
