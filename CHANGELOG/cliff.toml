# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# changelog header
header = """
# Changelog\n
"""

# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}](https://github.com/RobinThrift/toolfetcher/releases/tag/{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %} BREAKING: {% endif %}\
          {{ commit.message | split(pat="\n") | first | trim | upper_first }} \
          [{{ commit.id | truncate(length=10, end="") }}](https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/commit/{{ commit.id }}) \
          (@{{ commit.author.name }})\
    {% endfor %}
{% endfor %}\n
"""

# template for the changelog footer
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
                    /compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
            /compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true

# filter out the commits that are not conventional
filter_unconventional = false

# process each line of a commit as an individual commit
split_commits = false

# regex for parsing and grouping commits
commit_parsers = [
  { message = '^.*: Add docs', group = "<!-- 2 -->Documentation" },
  { message = '^.*\((.*)\): Add docs', group = "<!-- 2 -->Documentation (${1})" },
  { message = '^docs:', group = "<!-- 2 -->Documentation" },
  { message = '^docs\((.*)\):', group = "<!-- 2 -->Documentation (${1})" },

  { message = '^feat\((.*)\):', group = "<!-- 0 -->New Features (${1})" },
  { message = '^feat\((.*)\):', group = "<!-- 0 -->New Features (${1})" },

  { message = '^build\((.*)\):', group = "<!-- 3 -->Build (${1})" },
  { message = "^build", group = "<!-- 3 -->Build" },

  { message = '^deps\((.*)\)', group = "<!-- 4 -->Dependencies" },
  { message = 'deps:', group = "<!-- 4 -->Dependencies" },
  { message = '^.*: Upgraded', group = "<!-- 4 -->Dependencies" },

  { message = '^fix\((.*)\):', group = "<!-- 1 -->Fixes" },
  { message = '^fix\((.*)\):', group = "<!-- 1 -->Fixes (${1})" },
  { message = "^test", group = "<!-- 1 -->Fixes" },
  { message = "^fix", group = "<!-- 1 -->Fixes" },
  { message = "^.*: fix", group = "<!-- 1 -->Fixes" },

  { message = '^.*: Remove', group = "<!-- 5 -->Removed" },
  { message = '^.*\((.*)\): Remove', group = "<!-- 5 -->Removed (${1})" },

  { message = "^.*", group = "<!-- 6 -->Other Changes" },
]

# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false

# filter out the commits that are not matched by commit parsers
filter_commits = true

# regex for matching git tags
tag_pattern = "v[0-9].*"

# regex for ignoring tags
ignore_tags = ""

# sort the tags topologically
topo_order = false

# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"

[remote.github]
owner = "RobinThrift"
repo = "toolfetcher"

